{
  "repository": ".",
  "scanTime": "2025-08-31T02:49:21.729661+05:30",
  "duration": 45460417,
  "workflowsCount": 3,
  "rulesCount": 34,
  "findings": [
    {
      "RuleID": "SHELL_INJECTION",
      "RuleName": "Shell Injection Vulnerability",
      "Description": "The script contains shell injection vulnerability where user input is executed directly in shell context",
      "Severity": "CRITICAL",
      "Category": "INJECTION_ATTACK",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "self-security-scan",
      "StepName": "Generate Security Summary",
      "Evidence": "cat \u003e security-summary.md \u003c\u003c EOF\n# üõ°Ô∏è Flowlyt Self-Security Validation\n\n**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')\n**Repository:** ${{ github.repository }}\n**Branch:** ${{ github.ref_name }}\n**Commit:** ${{ github.sha }}\n\n## üìä Scan Results\n| Metric | Value |\n|--------|-------|\n| Total Findings | ${{ steps.scan.outputs.findings-count }} |\n| Critical Issues | ${{ steps.scan.outputs.critical-count }} |\n| High Issues | ${{ steps.scan.outputs.high-count }} |\n| Security Gate | $([ \"${{ steps.security-gate.outputs.passed }}\" = \"true\" ] \u0026\u0026 echo \"‚úÖ PASSED\" || echo \"‚ùå FAILED\") |\n| SARIF Upload | $([ \"${{ steps.upload-sarif.outcome }}\" = \"success\" ] \u0026\u0026 echo \"‚úÖ Success\" || echo \"‚ùå Failed\") |\n\n## üß† Intelligence Features Tested\n- ‚úÖ Basic scanning functionality\n- ‚úÖ Enterprise configuration loading\n- ‚úÖ Policy enforcement engine\n- ‚úÖ SARIF 2.1.0 output generation\n- ‚úÖ OSV.dev vulnerability intelligence\n- ‚úÖ GitHub Security tab integration\n\n## üîí Security Validation\n$([ \"${{ steps.scan.outputs.critical-count }}\" = \"0\" ] \u0026\u0026 echo \"‚úÖ **SECURE** - No critical vulnerabilities in security scanner\" || echo \"üö® **CRITICAL** - Security scanner has vulnerabilities!\")\n\nEOF\n\ncat security-summary.md \u003e\u003e $GITHUB_STEP_SUMMARY\n",
      "Remediation": "Sanitize user input or use environment variables instead of direct interpolation in shell commands",
      "LineNumber": 50,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "DANGEROUS_WRITE_OPERATION",
      "RuleName": "Dangerous Write Operation",
      "Description": "Direct writes to $GITHUB_OUTPUT or $GITHUB_ENV can lead to command injection vulnerabilities",
      "Severity": "CRITICAL",
      "Category": "INJECTION_ATTACK",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "self-security-scan",
      "StepName": "Security Gate Decision",
      "Evidence": "CRITICAL_COUNT=\"${{ steps.scan.outputs.critical-count }}\"\nHIGH_COUNT=\"${{ steps.scan.outputs.high-count }}\"\n\necho \"üîí Security Gate Evaluation:\"\necho \"Critical findings: $CRITICAL_COUNT\"\necho \"High findings: $HIGH_COUNT\"\n\n# For a security tool repository, we should have zero critical issues\nif [ \"$CRITICAL_COUNT\" -gt 0 ]; then\n  echo \"üö® SECURITY GATE: BLOCKED\"\n  echo \"A security scanner repository cannot have critical vulnerabilities!\"\n  echo \"passed=false\" \u003e\u003e $GITHUB_OUTPUT\n  exit 1\nelif [ \"$HIGH_COUNT\" -gt 3 ]; then\n  echo \"‚ö†Ô∏è SECURITY GATE: WARNING\"\n  echo \"High number of high-severity findings ($HIGH_COUNT)\"\n  echo \"Consider addressing these issues\"\n  echo \"passed=true\" \u003e\u003e $GITHUB_OUTPUT\nelse\n  echo \"‚úÖ SECURITY GATE: PASSED\"\n  echo \"Repository meets security standards\"\n  echo \"passed=true\" \u003e\u003e $GITHUB_OUTPUT\nfi",
      "Remediation": "Use GitHub's recommended secure methods: echo \"name=value\" \u003e\u003e $GITHUB_OUTPUT or use multiline values with EOF delimiters",
      "LineNumber": 50,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "DANGEROUS_WRITE_OPERATION",
      "RuleName": "Dangerous Write Operation",
      "Description": "Direct writes to $GITHUB_OUTPUT or $GITHUB_ENV can lead to command injection vulnerabilities",
      "Severity": "CRITICAL",
      "Category": "INJECTION_ATTACK",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "self-security-scan",
      "StepName": "Security Gate Decision",
      "Evidence": "CRITICAL_COUNT=\"${{ steps.scan.outputs.critical-count }}\"\nHIGH_COUNT=\"${{ steps.scan.outputs.high-count }}\"\n\necho \"üîí Security Gate Evaluation:\"\necho \"Critical findings: $CRITICAL_COUNT\"\necho \"High findings: $HIGH_COUNT\"\n\n# For a security tool repository, we should have zero critical issues\nif [ \"$CRITICAL_COUNT\" -gt 0 ]; then\n  echo \"üö® SECURITY GATE: BLOCKED\"\n  echo \"A security scanner repository cannot have critical vulnerabilities!\"\n  echo \"passed=false\" \u003e\u003e $GITHUB_OUTPUT\n  exit 1\nelif [ \"$HIGH_COUNT\" -gt 3 ]; then\n  echo \"‚ö†Ô∏è SECURITY GATE: WARNING\"\n  echo \"High number of high-severity findings ($HIGH_COUNT)\"\n  echo \"Consider addressing these issues\"\n  echo \"passed=true\" \u003e\u003e $GITHUB_OUTPUT\nelse\n  echo \"‚úÖ SECURITY GATE: PASSED\"\n  echo \"Repository meets security standards\"\n  echo \"passed=true\" \u003e\u003e $GITHUB_OUTPUT\nfi",
      "Remediation": "Use GitHub's recommended secure methods: echo \"name=value\" \u003e\u003e $GITHUB_OUTPUT or use multiline values with EOF delimiters",
      "LineNumber": 50,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "DANGEROUS_WRITE_OPERATION",
      "RuleName": "Dangerous Write Operation",
      "Description": "Direct writes to $GITHUB_OUTPUT or $GITHUB_ENV can lead to command injection vulnerabilities",
      "Severity": "CRITICAL",
      "Category": "INJECTION_ATTACK",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "self-security-scan",
      "StepName": "Self-Scan with Enterprise Config",
      "Evidence": "echo \"üèõÔ∏è Running enterprise security scan with policy enforcement...\"\n\n# Run with enterprise configuration\n./flowlyt scan \\\n  --repo . \\\n  --config .flowlyt-enterprise.yml \\\n  --enable-policy-enforcement \\\n  --enable-vuln-intel \\\n  --output sarif \\\n  --output-file flowlyt-self-scan.sarif \\\n  --min-severity LOW \\\n| tee scan-output.log\n\n# Extract metrics from output\nTOTAL_FINDINGS=$(jq '.runs[0].results | length' flowlyt-self-scan.sarif 2\u003e/dev/null || echo \"0\")\nCRITICAL_COUNT=$(jq '[.runs[0].results[] | select(.level == \"error\" and (.properties.severity // \"HIGH\") == \"CRITICAL\")] | length' flowlyt-self-scan.sarif 2\u003e/dev/null || echo \"0\")\nHIGH_COUNT=$(jq '[.runs[0].results[] | select(.level == \"error\" and (.properties.severity // \"HIGH\") == \"HIGH\")] | length' flowlyt-self-scan.sarif 2\u003e/dev/null || echo \"0\")\n\necho \"findings-count=$TOTAL_FINDINGS\" \u003e\u003e $GITHUB_OUTPUT\necho \"critical-count=$CRITICAL_COUNT\" \u003e\u003e $GITHUB_OUTPUT\necho \"high-count=$HIGH_COUNT\" \u003e\u003e $GITHUB_OUTPUT\n\necho \"üìä Self-scan results:\"\necho \"Total findings: $TOTAL_FINDINGS\"\necho \"Critical: $CRITICAL_COUNT\"\necho \"High: $HIGH_COUNT\"\n\n# Validate that our own repository is secure\nif [ \"$CRITICAL_COUNT\" -gt 0 ]; then\n  echo \"üö® CRITICAL: Flowlyt repository has critical security issues!\"\n  echo \"This is a serious problem - the security scanner itself has vulnerabilities\"\nfi",
      "Remediation": "Use GitHub's recommended secure methods: echo \"name=value\" \u003e\u003e $GITHUB_OUTPUT or use multiline values with EOF delimiters",
      "LineNumber": 50,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "DANGEROUS_WRITE_OPERATION",
      "RuleName": "Dangerous Write Operation",
      "Description": "Direct writes to $GITHUB_OUTPUT or $GITHUB_ENV can lead to command injection vulnerabilities",
      "Severity": "CRITICAL",
      "Category": "INJECTION_ATTACK",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "self-security-scan",
      "StepName": "Self-Scan with Enterprise Config",
      "Evidence": "echo \"üèõÔ∏è Running enterprise security scan with policy enforcement...\"\n\n# Run with enterprise configuration\n./flowlyt scan \\\n  --repo . \\\n  --config .flowlyt-enterprise.yml \\\n  --enable-policy-enforcement \\\n  --enable-vuln-intel \\\n  --output sarif \\\n  --output-file flowlyt-self-scan.sarif \\\n  --min-severity LOW \\\n| tee scan-output.log\n\n# Extract metrics from output\nTOTAL_FINDINGS=$(jq '.runs[0].results | length' flowlyt-self-scan.sarif 2\u003e/dev/null || echo \"0\")\nCRITICAL_COUNT=$(jq '[.runs[0].results[] | select(.level == \"error\" and (.properties.severity // \"HIGH\") == \"CRITICAL\")] | length' flowlyt-self-scan.sarif 2\u003e/dev/null || echo \"0\")\nHIGH_COUNT=$(jq '[.runs[0].results[] | select(.level == \"error\" and (.properties.severity // \"HIGH\") == \"HIGH\")] | length' flowlyt-self-scan.sarif 2\u003e/dev/null || echo \"0\")\n\necho \"findings-count=$TOTAL_FINDINGS\" \u003e\u003e $GITHUB_OUTPUT\necho \"critical-count=$CRITICAL_COUNT\" \u003e\u003e $GITHUB_OUTPUT\necho \"high-count=$HIGH_COUNT\" \u003e\u003e $GITHUB_OUTPUT\n\necho \"üìä Self-scan results:\"\necho \"Total findings: $TOTAL_FINDINGS\"\necho \"Critical: $CRITICAL_COUNT\"\necho \"High: $HIGH_COUNT\"\n\n# Validate that our own repository is secure\nif [ \"$CRITICAL_COUNT\" -gt 0 ]; then\n  echo \"üö® CRITICAL: Flowlyt repository has critical security issues!\"\n  echo \"This is a serious problem - the security scanner itself has vulnerabilities\"\nfi",
      "Remediation": "Use GitHub's recommended secure methods: echo \"name=value\" \u003e\u003e $GITHUB_OUTPUT or use multiline values with EOF delimiters",
      "LineNumber": 50,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "DANGEROUS_WRITE_OPERATION",
      "RuleName": "Dangerous Write Operation",
      "Description": "Direct writes to $GITHUB_OUTPUT or $GITHUB_ENV can lead to command injection vulnerabilities",
      "Severity": "CRITICAL",
      "Category": "INJECTION_ATTACK",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "build-and-test",
      "StepName": "Build Flowlyt",
      "Evidence": "echo \"Building Flowlyt scanner...\"\ngo build -o flowlyt ./cmd/flowlyt\nchmod +x flowlyt\n\n# Test basic functionality\n./flowlyt --version\necho \"success=true\" \u003e\u003e $GITHUB_OUTPUT",
      "Remediation": "Use GitHub's recommended secure methods: echo \"name=value\" \u003e\u003e $GITHUB_OUTPUT or use multiline values with EOF delimiters",
      "LineNumber": 50,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "INJECTION_VULNERABILITY",
      "RuleName": "Code Injection from User Input",
      "Description": "The workflow contains injection vulnerability where user-controlled input is directly interpolated into shell commands",
      "Severity": "CRITICAL",
      "Category": "INJECTION_ATTACK",
      "FilePath": ".github/workflows/docker-publish.yml",
      "JobName": "build-and-publish",
      "StepName": "Derive version",
      "Evidence": "if [ \"${{ github.event_name }}\" = \"workflow_dispatch\" ]; then\n  VERSION=\"${{ github.event.inputs.version }}\"\nelse\n  # Extract version from tag (remove 'v' prefix)\n  VERSION=${GITHUB_REF_NAME#v}\nfi\necho \"Version: $VERSION\"\necho \"version=$VERSION\" \u003e\u003e \"$GITHUB_OUTPUT\"\n",
      "Remediation": "Use environment variables instead of direct interpolation: assign the value to an environment variable and reference it in the script",
      "LineNumber": 35,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "DANGEROUS_WRITE_OPERATION",
      "RuleName": "Dangerous Write Operation",
      "Description": "Direct writes to $GITHUB_OUTPUT or $GITHUB_ENV can lead to command injection vulnerabilities",
      "Severity": "CRITICAL",
      "Category": "INJECTION_ATTACK",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "build-and-test",
      "StepName": "Build Flowlyt",
      "Evidence": "echo \"Building Flowlyt scanner...\"\ngo build -o flowlyt ./cmd/flowlyt\nchmod +x flowlyt\n\n# Test basic functionality\n./flowlyt --version\necho \"success=true\" \u003e\u003e $GITHUB_OUTPUT",
      "Remediation": "Use GitHub's recommended secure methods: echo \"name=value\" \u003e\u003e $GITHUB_OUTPUT or use multiline values with EOF delimiters",
      "LineNumber": 50,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "EXTERNAL_TRIGGER_DEBUG",
      "RuleName": "External Trigger Debug",
      "Description": "Workflow uses external trigger 'workflow_dispatch': Can be manually triggered with potential for abuse",
      "Severity": "HIGH",
      "Category": "ACCESS_CONTROL",
      "FilePath": ".github/workflows/docker-publish.yml",
      "JobName": "",
      "StepName": "",
      "Evidence": "workflow_dispatch",
      "Remediation": "Review trigger necessity and add appropriate security controls",
      "LineNumber": 7,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "configuration-validation",
      "StepName": "Checkout",
      "Evidence": "uses: actions/checkout@v4 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 31,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "SHELL_SCRIPT_ISSUES",
      "RuleName": "Shell Script Security Issues",
      "Description": "Unquoted variable usage may lead to word splitting and pathname expansion",
      "Severity": "MEDIUM",
      "Category": "MALICIOUS_PATTERN",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "build-and-test",
      "StepName": "Build Flowlyt",
      "Evidence": "echo \"Building Flowlyt scanner...\"\ngo build -o flowlyt ./cmd/flowlyt\nchmod +x flowlyt\n\n# Test basic functionality\n./flowlyt --version\necho \"success=true\" \u003e\u003e $GITHUB_OUTPUT",
      "Remediation": "Quote variables: \"$VAR\" instead of $VAR",
      "LineNumber": 50,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "validation-summary",
      "StepName": "Create Issue on Validation Failure",
      "Evidence": "uses: actions/github-script@v7 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 434,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "build-and-test",
      "StepName": "Checkout",
      "Evidence": "uses: actions/checkout@v4 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 31,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "build-and-test",
      "StepName": "Set up Go",
      "Evidence": "uses: actions/setup-go@v5 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 34,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "build-and-test",
      "StepName": "Cache Go modules",
      "Evidence": "uses: actions/cache@v4 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 39,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "build-and-test",
      "StepName": "Upload Coverage",
      "Evidence": "uses: actions/upload-artifact@v4 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 66,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "build-and-test",
      "StepName": "Upload Binary",
      "Evidence": "uses: actions/upload-artifact@v4 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 66,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "self-security-scan",
      "StepName": "Checkout",
      "Evidence": "uses: actions/checkout@v4 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 31,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "self-security-scan",
      "StepName": "Download Built Binary",
      "Evidence": "uses: actions/download-artifact@v4 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 93,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "self-security-scan",
      "StepName": "Upload SARIF to GitHub Security",
      "Evidence": "uses: github/codeql-action/upload-sarif@v3 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 217,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "self-security-scan",
      "StepName": "Upload Scan Results",
      "Evidence": "uses: actions/upload-artifact@v4 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 66,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "performance-validation",
      "StepName": "Download Built Binary",
      "Evidence": "uses: actions/download-artifact@v4 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 93,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "performance-validation",
      "StepName": "Checkout",
      "Evidence": "uses: actions/checkout@v4 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 31,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/docker-publish.yml",
      "JobName": "build-and-publish",
      "StepName": "Extract metadata",
      "Evidence": "uses: docker/metadata-action@v5 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 54,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNTRUSTED_ACTION_SOURCE",
      "RuleName": "Untrusted Action Source",
      "Description": "Action is from an untrusted or unknown publisher",
      "Severity": "MEDIUM",
      "Category": "SUPPLY_CHAIN",
      "FilePath": ".github/workflows/release.yml",
      "JobName": "release",
      "StepName": "Create Release",
      "Evidence": "softprops/action-gh-release@26994186c0ac3ef5cae75ac16aa32e8153525f77",
      "Remediation": "Verify the action is from a trusted source and consider pinning to a specific SHA",
      "LineNumber": 41,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "SHELL_SCRIPT_ISSUES",
      "RuleName": "Shell Script Security Issues",
      "Description": "Unquoted variable usage may lead to word splitting and pathname expansion",
      "Severity": "MEDIUM",
      "Category": "MALICIOUS_PATTERN",
      "FilePath": ".github/workflows/docker-publish.yml",
      "JobName": "build-and-publish",
      "StepName": "Derive version",
      "Evidence": "if [ \"${{ github.event_name }}\" = \"workflow_dispatch\" ]; then\n  VERSION=\"${{ github.event.inputs.version }}\"\nelse\n  # Extract version from tag (remove 'v' prefix)\n  VERSION=${GITHUB_REF_NAME#v}\nfi\necho \"Version: $VERSION\"\necho \"version=$VERSION\" \u003e\u003e \"$GITHUB_OUTPUT\"",
      "Remediation": "Quote variables: \"$VAR\" instead of $VAR",
      "LineNumber": 35,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/docker-publish.yml",
      "JobName": "build-and-publish",
      "StepName": "Build and push Docker images",
      "Evidence": "uses: docker/build-push-action@v5 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 69,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "configuration-validation",
      "StepName": "Upload Configuration Test Results",
      "Evidence": "uses: actions/upload-artifact@v4 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 66,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/docker-publish.yml",
      "JobName": "build-and-publish",
      "StepName": "Log in to GitHub Container Registry",
      "Evidence": "uses: docker/login-action@v3 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 46,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/docker-publish.yml",
      "JobName": "build-and-publish",
      "StepName": "Set up Docker Buildx",
      "Evidence": "uses: docker/setup-buildx-action@v3 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 31,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/docker-publish.yml",
      "JobName": "build-and-publish",
      "StepName": "Checkout",
      "Evidence": "uses: actions/checkout@v4 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 26,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "UNPINNED_ACTION",
      "RuleName": "Unpinned GitHub Action",
      "Description": "GitHub Action is not pinned to a specific SHA commit, which may lead to supply chain attacks",
      "Severity": "MEDIUM",
      "Category": "MISCONFIGURATION",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "configuration-validation",
      "StepName": "Download Built Binary",
      "Evidence": "uses: actions/download-artifact@v4 (version tag (not SHA))",
      "Remediation": "Pin the action to a full 40-character commit SHA instead of a version tag or branch reference. Example: uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846",
      "LineNumber": 93,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "SHELL_SCRIPT_ISSUES",
      "RuleName": "Shell Script Security Issues",
      "Description": "Unquoted variable usage may lead to word splitting and pathname expansion",
      "Severity": "MEDIUM",
      "Category": "MALICIOUS_PATTERN",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "self-security-scan",
      "StepName": "Self-Scan with Enterprise Config",
      "Evidence": "echo \"üèõÔ∏è Running enterprise security scan with policy enforcement...\"\n\n# Run with enterprise configuration\n./flowlyt scan \\\n  --repo . \\\n  --config .flowlyt-enterprise.yml \\\n  --enable-policy-enforcement \\\n  --enable-vuln-intel \\\n  --output sarif \\\n  --output-file flowlyt-self-scan.sarif \\\n  --min-severity LOW \\\n| tee scan-output.log\n\n# Extract metrics from output\nTOTAL_FINDINGS=$(jq '.runs[0].results | length' flowlyt-self-scan.sarif 2\u003e/dev/null || echo \"0\")\nCRITICAL_COUNT=$(jq '[.runs[0].results[] | select(.level == \"error\" and (.properties.severity // \"HIGH\") == \"CRITICAL\")] | length' flowlyt-self-scan.sarif 2\u003e/dev/null || echo \"0\")\nHIGH_COUNT=$(jq '[.runs[0].results[] | select(.level == \"error\" and (.properties.severity // \"HIGH\") == \"HIGH\")] | length' flowlyt-self-scan.sarif 2\u003e/dev/null || echo \"0\")\n\necho \"findings-count=$TOTAL_FINDINGS\" \u003e\u003e $GITHUB_OUTPUT\necho \"critical-count=$CRITICAL_COUNT\" \u003e\u003e $GITHUB_OUTPUT\necho \"high-count=$HIGH_COUNT\" \u003e\u003e $GITHUB_OUTPUT\n\necho \"üìä Self-scan results:\"\necho \"Total findings: $TOTAL_FINDINGS\"\necho \"Critical: $CRITICAL_COUNT\"\necho \"High: $HIGH_COUNT\"\n\n# Validate that our own repository is secure\nif [ \"$CRITICAL_COUNT\" -gt 0 ]; then\n  echo \"üö® CRITICAL: Flowlyt repository has critical security issues!\"\n  echo \"This is a serious problem - the security scanner itself has vulnerabilities\"\nfi",
      "Remediation": "Quote variables: \"$VAR\" instead of $VAR",
      "LineNumber": 50,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "SHELL_SCRIPT_ISSUES",
      "RuleName": "Shell Script Security Issues",
      "Description": "Unquoted variable usage may lead to word splitting and pathname expansion",
      "Severity": "MEDIUM",
      "Category": "MALICIOUS_PATTERN",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "self-security-scan",
      "StepName": "Security Gate Decision",
      "Evidence": "CRITICAL_COUNT=\"${{ steps.scan.outputs.critical-count }}\"\nHIGH_COUNT=\"${{ steps.scan.outputs.high-count }}\"\n\necho \"üîí Security Gate Evaluation:\"\necho \"Critical findings: $CRITICAL_COUNT\"\necho \"High findings: $HIGH_COUNT\"\n\n# For a security tool repository, we should have zero critical issues\nif [ \"$CRITICAL_COUNT\" -gt 0 ]; then\n  echo \"üö® SECURITY GATE: BLOCKED\"\n  echo \"A security scanner repository cannot have critical vulnerabilities!\"\n  echo \"passed=false\" \u003e\u003e $GITHUB_OUTPUT\n  exit 1\nelif [ \"$HIGH_COUNT\" -gt 3 ]; then\n  echo \"‚ö†Ô∏è SECURITY GATE: WARNING\"\n  echo \"High number of high-severity findings ($HIGH_COUNT)\"\n  echo \"Consider addressing these issues\"\n  echo \"passed=true\" \u003e\u003e $GITHUB_OUTPUT\nelse\n  echo \"‚úÖ SECURITY GATE: PASSED\"\n  echo \"Repository meets security standards\"\n  echo \"passed=true\" \u003e\u003e $GITHUB_OUTPUT\nfi",
      "Remediation": "Quote variables: \"$VAR\" instead of $VAR",
      "LineNumber": 50,
      "GitHubURL": "",
      "GitLabURL": ""
    },
    {
      "RuleID": "SHELL_SCRIPT_ISSUES",
      "RuleName": "Shell Script Security Issues",
      "Description": "Unquoted variable usage may lead to word splitting and pathname expansion",
      "Severity": "MEDIUM",
      "Category": "MALICIOUS_PATTERN",
      "FilePath": ".github/workflows/ci-validation.yml",
      "JobName": "self-security-scan",
      "StepName": "Generate Security Summary",
      "Evidence": "cat \u003e security-summary.md \u003c\u003c EOF\n# üõ°Ô∏è Flowlyt Self-Security Validation\n\n**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')\n**Repository:** ${{ github.repository }}\n**Branch:** ${{ github.ref_name }}\n**Commit:** ${{ github.sha }}\n\n## üìä Scan Results\n| Metric | Value |\n|--------|-------|\n| Total Findings | ${{ steps.scan.outputs.findings-count }} |\n| Critical Issues | ${{ steps.scan.outputs.critical-count }} |\n| High Issues | ${{ steps.scan.outputs.high-count }} |\n| Security Gate | $([ \"${{ steps.security-gate.outputs.passed }}\" = \"true\" ] \u0026\u0026 echo \"‚úÖ PASSED\" || echo \"‚ùå FAILED\") |\n| SARIF Upload | $([ \"${{ steps.upload-sarif.outcome }}\" = \"success\" ] \u0026\u0026 echo \"‚úÖ Success\" || echo \"‚ùå Failed\") |\n\n## üß† Intelligence Features Tested\n- ‚úÖ Basic scanning functionality\n- ‚úÖ Enterprise configuration loading\n- ‚úÖ Policy enforcement engine\n- ‚úÖ SARIF 2.1.0 output generation\n- ‚úÖ OSV.dev vulnerability intelligence\n- ‚úÖ GitHub Security tab integration\n\n## üîí Security Validation\n$([ \"${{ steps.scan.outputs.critical-count }}\" = \"0\" ] \u0026\u0026 echo \"‚úÖ **SECURE** - No critical vulnerabilities in security scanner\" || echo \"üö® **CRITICAL** - Security scanner has vulnerabilities!\")\n\nEOF\n\ncat security-summary.md \u003e\u003e $GITHUB_STEP_SUMMARY",
      "Remediation": "Quote variables: \"$VAR\" instead of $VAR",
      "LineNumber": 50,
      "GitHubURL": "",
      "GitLabURL": ""
    }
  ],
  "summary": {
    "critical": 8,
    "high": 1,
    "medium": 26,
    "low": 0,
    "info": 0,
    "total": 35
  }
}