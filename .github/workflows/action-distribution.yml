name: Auto-Update Action Distribution

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update action distribution'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  update-action-distribution:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
      
      - name: Extract Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION_NUM="${VERSION#v}"
          else
            VERSION="dev-$(git rev-parse --short HEAD)"
            VERSION_NUM="development"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_num=$VERSION_NUM" >> $GITHUB_OUTPUT
          echo "Updating action for version: $VERSION"
      
      - name: Update Action Metadata
        run: |
          echo "üìù Updating action metadata..."
          
          # Update version in action.yml if it exists
          if grep -q "version:" action.yml; then
            sed -i "s/version: .*/version: '${{ steps.version.outputs.version_num }}'/" action.yml
          fi
          
          # Update version references in documentation
          if [ -f "README-ACTION.md" ]; then
            sed -i "s/uses: harekrishnarai\/flowlyt@v[0-9.]*/uses: harekrishnarai\/flowlyt@${{ steps.version.outputs.version }}/g" README-ACTION.md
          fi
          
          echo "‚úÖ Action metadata updated"
      
      - name: Test Updated Action
        uses: ./
        with:
          repository: './test/sample-repo'
          output-format: 'json'
          upload-sarif: 'false'
          comment-on-pr: 'false'
          verbose: 'true'
        continue-on-error: true
      
      - name: Create Major Version Tag
        if: github.event_name == 'release'
        run: |
          echo "üè∑Ô∏è Creating/updating major version tag..."
          
          VERSION="${{ steps.version.outputs.version }}"
          MAJOR_VERSION=$(echo "$VERSION" | cut -d. -f1)
          
          echo "Major version: $MAJOR_VERSION"
          
          # Delete existing major version tag if it exists
          git push origin :refs/tags/$MAJOR_VERSION 2>/dev/null || true
          
          # Create new major version tag
          git tag -f $MAJOR_VERSION
          git push origin $MAJOR_VERSION
          
          echo "‚úÖ Major version tag $MAJOR_VERSION updated"
      
      - name: Update Distribution README
        if: github.event_name == 'release'
        run: |
          echo "üìö Updating distribution README..."
          
          # Create marketplace-ready README.md from README-ACTION.md
          cp README-ACTION.md README.md
          
          # Add version badge at the top
          VERSION="${{ steps.version.outputs.version_num }}"
          
          # Create version and marketplace badges
          cat > badges.md << EOF
          ![Version](https://img.shields.io/badge/version-$VERSION-blue?style=flat&logo=github)
          ![GitHub Marketplace](https://img.shields.io/badge/Marketplace-Flowlyt%20Security-blue?style=flat&logo=github)
          ![License](https://img.shields.io/github/license/harekrishnarai/flowlyt?style=flat)
          ![Downloads](https://img.shields.io/github/downloads/harekrishnarai/flowlyt/total?style=flat)
          ![Stars](https://img.shields.io/github/stars/harekrishnarai/flowlyt?style=flat)
          
          EOF
          
          # Insert badges after the title
          sed -i '2r badges.md' README.md
          
          # Update all version references to the latest
          sed -i "s/@v[0-9.]*/@${{ steps.version.outputs.version }}/g" README.md
          
          echo "‚úÖ Distribution README updated"
      
      - name: Commit Changes
        if: github.event_name == 'release'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add README.md action.yml README-ACTION.md
            git commit -m "üöÄ Auto-update action distribution for ${{ steps.version.outputs.version }}
            
            - Updated version references
            - Refreshed marketplace badges
            - Updated documentation examples
            
            Auto-generated by action distribution workflow"
            
            git push origin main
            echo "‚úÖ Changes committed and pushed"
          fi
      
      - name: Verify Action Accessibility
        run: |
          echo "üîç Verifying action accessibility..."
          
          # Test that the action can be referenced by version
          VERSION="${{ steps.version.outputs.version }}"
          REPO_URL="https://api.github.com/repos/harekrishnarai/flowlyt/contents/action.yml"
          
          if curl -s -f "$REPO_URL?ref=$VERSION" >/dev/null; then
            echo "‚úÖ Action accessible at version $VERSION"
          else
            echo "‚ö†Ô∏è Action may not be accessible at version $VERSION"
          fi
          
          # Verify action.yml is valid
          if [ -f "action.yml" ]; then
            echo "‚úÖ action.yml exists and is accessible"
          else
            echo "‚ùå action.yml not found"
            exit 1
          fi
      
      - name: Create Distribution Summary
        run: |
          cat > distribution-summary.md << EOF
          # üì¶ Action Distribution Update Summary
          
          **Version**: ${{ steps.version.outputs.version }}
          **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Trigger**: ${{ github.event_name }}
          
          ## ‚úÖ Updates Applied
          
          - üè∑Ô∏è **Version Tags**: Updated major version tag (${{ steps.version.outputs.version }})
          - üìù **Documentation**: Refreshed README with latest examples
          - üîó **References**: Updated all version references in docs
          - üìä **Badges**: Added/updated marketplace and version badges
          - üß™ **Testing**: Verified action functionality
          
          ## üéØ Action Usage
          
          Users can now reference the action as:
          
          \`\`\`yaml
          # Latest release
          uses: harekrishnarai/flowlyt@${{ steps.version.outputs.version }}
          
          # Major version (auto-updates)
          uses: harekrishnarai/flowlyt@$(echo "${{ steps.version.outputs.version }}" | cut -d. -f1)
          
          # Main branch (development)
          uses: harekrishnarai/flowlyt@main
          \`\`\`
          
          ## üìà Marketplace Status
          
          - **Listing**: Available on GitHub Marketplace
          - **Category**: Security, DevOps Tools
          - **Pricing**: Free
          - **Documentation**: Up-to-date with examples
          
          ## üöÄ Ready for Use
          
          The Flowlyt Security Action is ready for production use with:
          - ‚úÖ Self-contained installation
          - ‚úÖ Multi-platform support
          - ‚úÖ Enterprise features
          - ‚úÖ Comprehensive documentation
          - ‚úÖ Automated testing
          
          EOF
          
          cat distribution-summary.md >> $GITHUB_STEP_SUMMARY
      
      - name: Notify on Failure
        if: failure()
        run: |
          echo "‚ùå Action distribution update failed!"
          echo "Check the workflow logs for details and fix any issues."
          echo "Manual intervention may be required."
